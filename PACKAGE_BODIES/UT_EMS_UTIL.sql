--------------------------------------------------------
--  DDL for Package Body UT_EMS_UTIL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "INSTITUTE"."UT_EMS_UTIL" is

   -- generated by utPLSQL for SQL Developer on 2023-04-12 11:14:06
   --
   -- test delete_institute
   --
procedure delete_institute is
    l_actual   integer;
    l_expected integer := 37;
begin
    -- arrange

    -- act
    -- ems_util.delete_institute;
    
    -- assert
    SELECT INSTITUTE_ID INTO l_actual FROM INSTITUTE_MST WHERE INST_CODE = 'LSA';
    ut.expect(l_actual).to_equal(l_expected);
end delete_institute;

--
-- test delete_parents
--
procedure delete_parents is
    l_actual   integer;
    l_expected integer := 420;
begin
    -- arrange

    -- act
    -- ems_util.delete_parents;
    SELECT PARENTS_ID INTO l_actual FROM PARENTS_DET WHERE FIRSTNAME = 'Sureshbhai';
    
    -- assert
    ut.expect(l_actual).to_equal(l_expected);
end delete_parents;

--
-- test delete_students
--
procedure delete_students is
    l_actual   integer;
    l_expected integer := 410;
begin
    -- arrange

    -- act
    -- ems_util.delete_students;
    SELECT STUDENT_ID INTO l_actual FROM STUDENTS_DET WHERE FIRSTNAME = 'LAXMI';
    
    -- assert
    ut.expect(l_actual).to_equal(l_expected);
end delete_students;

--
-- test delete_employee
--
procedure delete_employee is
    l_actual   integer;
    l_expected integer := 74;
begin
    -- arrange

    -- act
    -- ems_util.delete_employee;
    SELECT EMPLOYEE_ID INTO l_actual FROM EMPLOYEE_DET WHERE EMPLOYEE_CODE = 'E079';
    -- assert
    ut.expect(l_actual).to_equal(l_expected);
end delete_employee;

--
-- test issue_book
--
procedure issue_book is
    c_actual sys_refcursor;
    c_expected sys_refcursor;
begin
    -- arrange

    -- act
    -- ems_util.issue_book;
   
    -- assert
    open c_actual for
        SELECT STUDENT_ID, LIB_ID, ISSUEDATE, RETURNDATE, INSTITUTE_ID, AC_YEARID
        FROM BOOKSISSUEDET
        WHERE BOOKISSUEID = 53;
    
    open c_expected for
        SELECT 409 AS STUDENT_ID, 
            12 AS LIB_ID, 
            TO_DATE('13-FEB-23','DD-MON-YY') AS ISSUEDATE, 
            TO_DATE('23-FEB-23','DD-MON-YY') AS RETURNDATE, 
            36 AS INSTITUTE_ID, 
            36 AS AC_YEARID
        FROM DUAL;
        
    ut.expect(c_actual).to_equal(c_expected);
end issue_book;

--
-- test return_book
--
procedure return_book is
    c_actual sys_refcursor;
    c_expected sys_refcursor;
begin
    -- arrange
    
    -- act
    -- ems_util.return_book;
    
    -- assert
    open c_actual for
        SELECT LIB_ID, STUDENTID, BOOKID, CHARGE, DESCR, STATUS, FINDATE
        FROM LIBFINEDET
        WHERE LIBFINID = 18;
    open c_expected for
        SELECT 12 AS LIB_ID, 
            409 AS STUDENTID, 
            11 AS BOOKID, 
            '0' AS CHARGE, 
            NULL AS DESCR, 
            'No' AS STATUS, 
            TO_DATE('13-FEB-23','DD-MON-YY') AS FINDATE
        FROM DUAL;
        
    ut.expect(c_actual).to_equal(c_expected);
end return_book;

--
-- test renew_book
--
procedure renew_book is
    c_actual sys_refcursor;
    c_expected sys_refcursor;
begin
    -- arrange
    
    -- act
    -- ems_util.renew_book;
    
    -- assert
    open c_actual for
        SELECT LIB_ID, STUDENT_ID, BOOKID, ISSUEDATE, RETURNDATE, INSTITUTE_ID, AC_YEARID
        FROM BOOKSISSUEDET
        WHERE BOOKISSUEID = 53;
    open c_expected for
        SELECT 12 AS LIB_ID, 
            409 AS STUDENT_ID, 
            11 AS BOOKID, 
            TO_DATE('13-FEB-23','DD-MON-YY') AS ISSUEDATE,
            TO_DATE('23-FEB-23','DD-MON-YY') AS RETURNDATE,
            36 AS INSTITUTE_ID,
            36 AS AC_YEARID
        FROM DUAL;
    ut.expect(c_actual).to_equal(c_expected);
end renew_book;

--
-- test upload_attendance_to_db
--
procedure upload_attendance_to_db is
    l_actual_inst   integer;
    l_expected_inst integer := 36;
    l_actual_yr   integer;
    l_expected_yr integer := 36;
begin
    -- arrange
    
    -- act
    -- ems_util.upload_attendance_to_db;
    SELECT INSTITUTE_ID INTO l_actual_inst FROM INSTITUTE_MST WHERE INST_CODE = 'DRAVIJ';
    SELECT AC_YEAR_ID INTO l_actual_yr FROM ACADEMIC_YEAR_MST WHERE INSTITUTE_ID = l_actual_inst;
    
    -- assert
    ut.expect(36).to_equal(l_expected_inst);
    ut.expect(36).to_equal(l_expected_yr);
end upload_attendance_to_db;

--
-- test upload_subjects_to_db
--
procedure upload_subjects_to_db is
    l_actual_inst   integer;
    l_expected_inst integer := 36;
    l_actual_yr   integer;
    l_expected_yr integer := 36;
begin
    -- arrange
    
    -- act
    -- ems_util.upload_subjects_to_db;
    SELECT INSTITUTE_ID INTO l_actual_inst FROM INSTITUTE_MST WHERE INST_CODE = 'DRAVIJ';
    SELECT AC_YEAR_ID INTO l_actual_yr FROM ACADEMIC_YEAR_MST WHERE INSTITUTE_ID = l_actual_inst;
    
    -- assert
    ut.expect(36).to_equal(l_expected_inst);
    ut.expect(36).to_equal(l_expected_yr);
end upload_subjects_to_db;

--
-- test upload_admission_to_db
--
procedure upload_admission_to_db is
    l_actual_inst   integer;
    l_expected_inst integer := 36;
    l_actual_yr   integer;
    l_expected_yr integer := 36;
begin
    -- arrange

    -- act
    -- ems_util.upload_admission_to_db;
    SELECT INSTITUTE_ID INTO l_actual_inst FROM INSTITUTE_MST WHERE INST_CODE = 'DRAVIJ';
    SELECT AC_YEAR_ID INTO l_actual_yr FROM ACADEMIC_YEAR_MST WHERE INSTITUTE_ID = l_actual_inst;
    
    -- assert
    ut.expect(36).to_equal(l_expected_inst);
    ut.expect(36).to_equal(l_expected_yr);
end upload_admission_to_db;

--
-- test upload_employees_to_db
--
procedure upload_employees_to_db is
    l_actual_inst   integer;
    l_expected_inst integer := 36;
    l_actual_yr   integer;
    l_expected_yr integer := 36;
begin
    -- arrange

    -- act
    -- ems_util.upload_employees_to_db;
    SELECT INSTITUTE_ID INTO l_actual_inst FROM INSTITUTE_MST WHERE INST_CODE = 'DRAVIJ';
    SELECT AC_YEAR_ID INTO l_actual_yr FROM ACADEMIC_YEAR_MST WHERE INSTITUTE_ID = l_actual_inst;
    
    -- assert
    ut.expect(36).to_equal(l_expected_inst);
    ut.expect(36).to_equal(l_expected_yr);
end upload_employees_to_db;

--
-- test upload_ass_subjects_to_db
--
procedure upload_ass_subjects_to_db is
    l_actual_inst   integer;
    l_expected_inst integer := 36;
    l_actual_yr   integer;
    l_expected_yr integer := 36;
begin
    -- arrange

    -- act
    -- ems_util.upload_ass_subjects_to_db;
    SELECT INSTITUTE_ID INTO l_actual_inst FROM INSTITUTE_MST WHERE INST_CODE = 'DRAVIJ';
    SELECT AC_YEAR_ID INTO l_actual_yr FROM ACADEMIC_YEAR_MST WHERE INSTITUTE_ID = l_actual_inst;
    
    -- assert
    ut.expect(36).to_equal(l_expected_inst);
    ut.expect(36).to_equal(l_expected_yr);
end upload_ass_subjects_to_db;

   --
   -- test hostel_assign_room
   --
procedure hostel_assign_room is
    c_actual sys_refcursor;
    c_expected sys_refcursor;
begin
    -- arrange

    -- act
    -- ems_util.hostel_assign_room;

    -- assert
    open c_actual for
        SELECT HOSTEL_ID, ROOM_ID, STUDENT_ID, STATUS, INSTITUTE_ID, AC_YEARID
        FROM HOSTEL_ROOM_ASSIGN_DET
        WHERE ROOM_ASSIGN_ID = 152;
        
    open c_expected for 
        SELECT 36 AS HOSTEL_ID, 
            25 AS ROOM_ID, 
            413 AS STUDENT_ID, 
            'Active' AS STATUS, 
            36 AS INSTITUTE_ID, 
            36 AS AC_YEARID
        FROM DUAL;
        
    ut.expect(c_actual).to_equal(c_expected);
end hostel_assign_room;

   --
   -- test assign_vehicle
   --
procedure assign_vehicle is
    c_expected sys_refcursor;
    c_actual   sys_refcursor;
begin
    -- arrange

    -- act
    -- ems_util.assign_vehicle;
      
    -- assert
    open c_actual for 
        SELECT VEHICAL_ID, TRANSPORT_CODE, POINT_ID, STUDENT_ID 
        FROM TRANSPORT_DET
        WHERE TRANSPORT_ID = 7;
        
    open c_expected for
        SELECT 7 AS VEHICAL_ID, 
            'TCODE1' AS TRANSPORT_CODE,
            8 AS POINT_ID,
            409 AS STUDENT_ID
        FROM DUAL;
        
    ut.expect(c_actual).to_equal(c_expected);
end assign_vehicle;

end ut_ems_util;

/
